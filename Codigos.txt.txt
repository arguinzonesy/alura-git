GIT
1. Para iniciar, se entra en carpeta desde el codigo y se inicia GIT
$ git init
$ git status

2. Empezamos a monitorear index.html
$ git add idex.html
or $ git add . (esto es para todos los archivos de la carpeta)

Para dejar de monitorear se usa "git rm --cached <file>"

3. Verificamos la versión y el uso del commit
$ git config --global user.email "yang.arguinzones@gmail.com"
$ git config --global user.name "Yang" (--local cuando se aplique solo a ese proyecto)
$ git commit -m "Creando archivo index.html con lista de cursos"

4. Para ver los cambios realizados en el commit
$ git log
$ git log --online
$ git log -p
:q

5. Ignorando archivos, voy a ignorar este mismo por cierto
Se genera un archivo llamado .gitignore y dentro se coloca las carpetas o archivos a ignorar
$ git add .gitignore
$ git commit -m "Se agrega gitignore"

6. Se crea servidor remoto
Una carpeta fuera del original y se inicia como servidor git
$ git init --bare

7. Se ingresa nuevamente a la carpeta de GIT donde esta el codigo
$ git remote
$ git remote add servidorlocal C:/Users/NewYang/Desktop/Personal/ONE/servidor/

8. Nuevos usuarios, se crea la carpeta puede ser local o remota y para clonar el repositorio
$ git clone /c/Users/NewYang/Desktop/Personal/ONE/servidor/ proyecto
Antes de clonar hay que enviar sobre el repositorio remoto

9. Enviar proyecto a servidor remoto
$ git push servidorlocal master
Se entra al otro perfil y se mete a la info
$ git remote rename local servidorlocal

10. Se agrega el repositorio servidor local
$ git pull servidorlocal master

11. Para enviar al servidor
$ git push servidorlocal master

12. Para llamar los cambios
$ git pull servidorlocal master
$ git log -p
:q

13. Para colocarlo en servidor gratuito por GitHub
HTTPS
$ git remote add origin https://github.com/arguinzonesy/alura-git.git
$ git branch -M main ** No
$ git push -u origin main ** No
$ git push origin master (esta si)

14. Branches - Ramificaciones
$ git branch
$ git branch titulo
$ git checkout titulo
$ git checkout - b titulo (resumido)


15. Unificar branches
$ git merge titulo
:x

16. Actualizando branch
$ git rebase titulo (mete todo en la unica commit)

LOG -> $ git log --graph (grafico los logs)

17. El "Control + Z" para Git
$ git restore index.html
$ git restore --stage index.html (quita si se add)
Si ya se commitio, se copia el hash del que se quiere deshacer
$ git revert (hash) :x
1 - git restore
2 - git restore --staged
3 - git revert

18. Guardando para despues, se hizo cambios pero no se comitiaron pero si se requiere guardar en stash
$ git stash
$ git stash list (se vera lista de stash)
$ git stash apply 0
o se puede aplicar y eliminar de la lista
$ git stash pop

19. Viajar en el tiempo, se retrocede a unos anteriores
$ git checkout (hash abreviado) 
$ git checkout -b NuevaBranch (para poder guardar lo generado)

20. Viendo las modificaciones
$ git diff (hash)..(otro hash) (ve modificaciones entre un commit y otro)
$ git diff (solo ve las diferencias sin commit agregado)

21. Tag o versionado  releases - Punto que nunca mas sera editado y a partir de allí sera así
$ git tag -a v0.1.0 -m "Lanzando la primera versión (BETA) de la aplicación de cursos"
Luego se envia a servidor GitHub
$ git remote -v
$ git push origin main 
$ git push origin v0.1.0